[{"path":"https://appsilon.github.io/reactable.extras/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Recle Vibal. Author, maintainer. Ivan Hrychaniuk. Author. Pedro Silva. Author. Appsilon Sp. z o.o.. Copyright holder.","code":""},{"path":"https://appsilon.github.io/reactable.extras/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Vibal R, Hrychaniuk , Silva P (2023). reactable.extras: Extra Features 'Reactable' Package. https://appsilon.github.io/reactable.extras/, https://github.com/Appsilon/reactable.extras.","code":"@Manual{,   title = {reactable.extras: Extra Features for 'Reactable' Package},   author = {Recle Vibal and Ivan Hrychaniuk and Pedro Silva},   year = {2023},   note = {https://appsilon.github.io/reactable.extras/, https://github.com/Appsilon/reactable.extras}, }"},{"path":"https://appsilon.github.io/reactable.extras/index.html","id":"reactableextras","dir":"","previous_headings":"","what":"Extra Features for Reactable Package","title":"Extra Features for Reactable Package","text":"Extra features reactable package reactable.extras R package enhances functionality reactable package Shiny applications. Reactable tables interactive customizable, reactable.extras extend capabilities, allowing create dynamic interactive data tables ease. context web apps, often need provide users additional tools interactivity data exploration. reactable.extras address need offering set functions components can seamlessly integrated Shiny apps.","code":""},{"path":"https://appsilon.github.io/reactable.extras/index.html","id":"how-to-install","dir":"","previous_headings":"","what":"How to install?","title":"Extra Features for Reactable Package","text":"Stable version: Development version:","code":"install.packages(\"reactable.extras\") remotes::install_github(\"Appsilon/reactable.extras\")"},{"path":"https://appsilon.github.io/reactable.extras/index.html","id":"how-to-use-it","dir":"","previous_headings":"","what":"How to use it?","title":"Extra Features for Reactable Package","text":"Getting started reactable.extras straightforward: Make sure latest version reactable. ’s required least version 0.4.0 Include necessary functions components Shiny UI definition. Use provided functions enhance reactable tables. can add custom buttons, checkboxes, date pickers, dropdowns, text inputs table cells. Customize behavior appearance input components based application’s requirements. Implement server-side processing pagination controls large datasets.","code":"library(shiny) library(reactable) library(reactable.extras)  data <- data.frame(   ID = 1:1000,   SKU_Number = paste0(\"SKU \", 1:1000),   Actions = rep(c(\"Updated\", \"Initialized\"), times = 20),   Registered = as.Date(\"2023/1/1\") )  ui <- fluidPage(   # Include reactable.extras in your UI   reactable_extras_dependency(),   reactableOutput(\"my_table\") )  server <- function(input, output, session) {   output$my_table <- renderReactable({     # Create a reactable table with enhanced features     reactable(       data,       columns = list(         ID = colDef(name = \"ID\"),         SKU_Number = colDef(name = \"SKU_Number\"),         Actions = colDef(           name = \"Actions\",           cell = button_extra(\"button\", class = \"btn btn-primary\")         ),         Registered = colDef(           cell = date_extra(\"Registered\", class = \"date-extra\")         )       )     )   })      observeEvent(input$button, {     showModal(modalDialog(       title = \"Selected row data\",       reactable(data[input$button$row, ])     ))   })    }  shinyApp(ui, server)"},{"path":"https://appsilon.github.io/reactable.extras/index.html","id":"how-to-contribute","dir":"","previous_headings":"","what":"How to contribute?","title":"Extra Features for Reactable Package","text":"want contribute project please submit regular PR, ’re done new feature bug fix. Reporting bug also helpful - please use GitHub issues describe problem detailed possible.","code":""},{"path":"https://appsilon.github.io/reactable.extras/index.html","id":"appsilon","dir":"","previous_headings":"","what":"Appsilon","title":"Extra Features for Reactable Package","text":"Appsilon Posit (formerly RStudio) Full Service Certified Partner. Learn appsilon.com. Get touch opensource@appsilon.com Explore Rhinoverse - family R packages built around Rhino!","code":""},{"path":"https://appsilon.github.io/reactable.extras/reference/button_extra.html","id":null,"dir":"Reference","previous_headings":"","what":"Button input for reactable column cell — button_extra","title":"Button input for reactable column cell — button_extra","text":"Button input reactable column cell","code":""},{"path":"https://appsilon.github.io/reactable.extras/reference/button_extra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Button input for reactable column cell — button_extra","text":"","code":"button_extra(id, key = NULL, ...)"},{"path":"https://appsilon.github.io/reactable.extras/reference/button_extra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Button input for reactable column cell — button_extra","text":"id id button input key alternative unique id server side processing ... parameters button, class supported now","code":""},{"path":"https://appsilon.github.io/reactable.extras/reference/button_extra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Button input for reactable column cell — button_extra","text":"","code":"reactable::colDef(cell = button_extra(\"click\", class = \"table-button\")) #> $cell #> [1] \"function(cellInfo) {\\n                 return React.createElement(ButtonExtras,\\n                 {id: 'click', label: cellInfo.value,\\n                  uuid: cellInfo.row['.internal_uuid'] ? cellInfo.row['.internal_uuid'] : (Number(cellInfo.id) + 1), column: cellInfo.column.id , class: 'table-button', className: 'table-button'}, cellInfo.id)\\n        }\" #> attr(,\"class\") #> [1] \"JS_EVAL\" #>  #> attr(,\"class\") #> [1] \"colDef\""},{"path":"https://appsilon.github.io/reactable.extras/reference/checkbox_extra.html","id":null,"dir":"Reference","previous_headings":"","what":"Checkbox input for reactable column cell — checkbox_extra","title":"Checkbox input for reactable column cell — checkbox_extra","text":"Checkbox input reactable column cell","code":""},{"path":"https://appsilon.github.io/reactable.extras/reference/checkbox_extra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checkbox input for reactable column cell — checkbox_extra","text":"","code":"checkbox_extra(id, key = NULL, ...)"},{"path":"https://appsilon.github.io/reactable.extras/reference/checkbox_extra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checkbox input for reactable column cell — checkbox_extra","text":"id id checkbox input key alternative unique id server side processing ... parameters checkbox, class supported now","code":""},{"path":"https://appsilon.github.io/reactable.extras/reference/checkbox_extra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checkbox input for reactable column cell — checkbox_extra","text":"","code":"reactable::colDef(cell = checkbox_extra(\"check\", class = \"table-check\")) #> $cell #> [1] \"function(cellInfo) {\\n              return React.createElement(checkboxExtras,\\n              {id: 'check', value: cellInfo.value, uuid: cellInfo.row['.internal_uuid'] ? cellInfo.row['.internal_uuid'] : (Number(cellInfo.id) + 1),\\n               column: cellInfo.column.id , class: 'table-check', className: 'table-check'}, cellInfo.id)\\n        }\" #> attr(,\"class\") #> [1] \"JS_EVAL\" #>  #> attr(,\"class\") #> [1] \"colDef\""},{"path":"https://appsilon.github.io/reactable.extras/reference/date_extra.html","id":null,"dir":"Reference","previous_headings":"","what":"Date input for reactable column cell — date_extra","title":"Date input for reactable column cell — date_extra","text":"Date input reactable column cell","code":""},{"path":"https://appsilon.github.io/reactable.extras/reference/date_extra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date input for reactable column cell — date_extra","text":"","code":"date_extra(id, key = NULL, ...)"},{"path":"https://appsilon.github.io/reactable.extras/reference/date_extra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Date input for reactable column cell — date_extra","text":"id id date input key alternative unique id server side processing ... parameters date input, class supported now","code":""},{"path":"https://appsilon.github.io/reactable.extras/reference/date_extra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Date input for reactable column cell — date_extra","text":"","code":"reactable::colDef(cell = date_extra(\"date\", class = \"table-date\")) #> $cell #> [1] \"function(cellInfo) {\\n              return React.createElement(dateExtras,\\n              {id: 'date', value: cellInfo.value, uuid: cellInfo.row['.internal_uuid'] ? cellInfo.row['.internal_uuid'] : (Number(cellInfo.id) + 1),\\n               column: cellInfo.column.id , class: 'table-date', className: 'table-date'}, cellInfo.id)\\n        }\" #> attr(,\"class\") #> [1] \"JS_EVAL\" #>  #> attr(,\"class\") #> [1] \"colDef\""},{"path":"https://appsilon.github.io/reactable.extras/reference/define_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Define the unique id to use when passing values to shiny — define_key","title":"Define the unique id to use when passing values to shiny — define_key","text":"Define unique id use passing values shiny","code":""},{"path":"https://appsilon.github.io/reactable.extras/reference/define_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define the unique id to use when passing values to shiny — define_key","text":"","code":"define_key(key)"},{"path":"https://appsilon.github.io/reactable.extras/reference/dropdown_extra.html","id":null,"dir":"Reference","previous_headings":"","what":"Select input for reactable column cell — dropdown_extra","title":"Select input for reactable column cell — dropdown_extra","text":"Select input reactable column cell","code":""},{"path":"https://appsilon.github.io/reactable.extras/reference/dropdown_extra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select input for reactable column cell — dropdown_extra","text":"","code":"dropdown_extra(id, choices, key = NULL, ...)"},{"path":"https://appsilon.github.io/reactable.extras/reference/dropdown_extra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select input for reactable column cell — dropdown_extra","text":"id id select input choices vector choices key alternative unique id server side processing ... parameters date input, class supported now","code":""},{"path":"https://appsilon.github.io/reactable.extras/reference/dropdown_extra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select input for reactable column cell — dropdown_extra","text":"","code":"reactable::colDef(   cell = dropdown_extra(\"dropdown\",   choices = letters[1:5],   class = \"table-dropdown\"   )  ) #> $cell #> [1] \"function(cellInfo) {\\n              return React.createElement(dropdownExtras,\\n              {id: 'dropdown', value: cellInfo.value,\\n               uuid: cellInfo.row['.internal_uuid'] ? cellInfo.row['.internal_uuid'] : (Number(cellInfo.id) + 1), column: cellInfo.column.id , class: 'table-dropdown', className: 'table-dropdown' , choices: [\\\"a\\\",\\\"b\\\",\\\"c\\\",\\\"d\\\",\\\"e\\\"]}, cellInfo.id)\\n        }\" #> attr(,\"class\") #> [1] \"JS_EVAL\" #>  #> attr(,\"class\") #> [1] \"colDef\""},{"path":"https://appsilon.github.io/reactable.extras/reference/get_data_on_page.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the data on the page — get_data_on_page","title":"Get the data on the page — get_data_on_page","text":"Get data page","code":""},{"path":"https://appsilon.github.io/reactable.extras/reference/get_data_on_page.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the data on the page — get_data_on_page","text":"","code":"get_data_on_page(data, page_number, total_pages)"},{"path":"https://appsilon.github.io/reactable.extras/reference/get_data_on_page.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the data on the page — get_data_on_page","text":"data data.frame without pages; pagination inferred page_number page data retrieve total_pages number pages data; determines pagination data pages","code":""},{"path":"https://appsilon.github.io/reactable.extras/reference/get_data_on_page.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the data on the page — get_data_on_page","text":"data.frame","code":""},{"path":"https://appsilon.github.io/reactable.extras/reference/reactable-extras-server.html","id":null,"dir":"Reference","previous_headings":"","what":"Create reactable UI with server-side processing — reactable-extras-server","title":"Create reactable UI with server-side processing — reactable-extras-server","text":"Create reactable UI server-side processing","code":""},{"path":"https://appsilon.github.io/reactable.extras/reference/reactable-extras-server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create reactable UI with server-side processing — reactable-extras-server","text":"","code":"reactable_extras_ui(id, width = \"auto\", height = \"auto\")  reactable_extras_server(id, data, total_pages = 4, sortable = TRUE, ...)"},{"path":"https://appsilon.github.io/reactable.extras/reference/reactable-extras-server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create reactable UI with server-side processing — reactable-extras-server","text":"id element id width, height CSS unit (\"100%\", \"400px\", \"auto\"), numeric number pixels data passed reactable::reactable() total_pages number pages sortable allow sorting columns ... arguments passed reactable::reactable()","code":""},{"path":"https://appsilon.github.io/reactable.extras/reference/reactable-extras-server.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create reactable UI with server-side processing — reactable-extras-server","text":"reactable_extras_ui() returns custom UI server-side processed reactable","code":""},{"path":"https://appsilon.github.io/reactable.extras/reference/reactable-extras-server.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create reactable UI with server-side processing — reactable-extras-server","text":"Arguments passed reactable::reactable() must contain pagination showPagination. set FALSE. Pagination handled server-side.","code":""},{"path":"https://appsilon.github.io/reactable.extras/reference/reactable-extras-server.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create reactable UI with server-side processing — reactable-extras-server","text":"","code":"if (interactive()) {   library(shiny)   library(reactable)   library(reactable.extras)    shinyApp(     reactable_extras_ui(\"big_data\"),     function(input, output, server) {       reactable_extras_server(         \"big_data\",         data = mtcars,         columns = list(           mpg = reactable::colDef(name = \"Miles per Gallon\"),           cyl = reactable::colDef(name = \"Cylinders\"),           disp = reactable::colDef(name = \"Displacement\")         ),         rows_per_page = 7       )     }   ) }"},{"path":"https://appsilon.github.io/reactable.extras/reference/reactable-page-controls.html","id":null,"dir":"Reference","previous_headings":"","what":"Module for reactable page navigation — reactable-page-controls","title":"Module for reactable page navigation — reactable-page-controls","text":"Module reactable page navigation","code":""},{"path":"https://appsilon.github.io/reactable.extras/reference/reactable-page-controls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Module for reactable page navigation — reactable-page-controls","text":"","code":"reactable_page_controls(id)  return_reactable_page(id, total_pages)"},{"path":"https://appsilon.github.io/reactable.extras/reference/reactable-page-controls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Module for reactable page navigation — reactable-page-controls","text":"id element id total_pages total number pages","code":""},{"path":"https://appsilon.github.io/reactable.extras/reference/reactable-page-controls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Module for reactable page navigation — reactable-page-controls","text":"reactable_page_controls() returns UI page navigation server-side processed reactable::reactable() data","code":""},{"path":"https://appsilon.github.io/reactable.extras/reference/reactable_extras_dependency.html","id":null,"dir":"Reference","previous_headings":"","what":"Reactable.extras JS and CSS dependencies — reactable_extras_dependency","title":"Reactable.extras JS and CSS dependencies — reactable_extras_dependency","text":"Reactable.extras JS CSS dependencies","code":""},{"path":"https://appsilon.github.io/reactable.extras/reference/reactable_extras_dependency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reactable.extras JS and CSS dependencies — reactable_extras_dependency","text":"","code":"reactable_extras_dependency()"},{"path":"https://appsilon.github.io/reactable.extras/reference/reactable_extras_dependency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reactable.extras JS and CSS dependencies — reactable_extras_dependency","text":"HTML dependency object.","code":""},{"path":"https://appsilon.github.io/reactable.extras/reference/text_extra.html","id":null,"dir":"Reference","previous_headings":"","what":"Text input for reactable column cell — text_extra","title":"Text input for reactable column cell — text_extra","text":"Text input reactable column cell","code":""},{"path":"https://appsilon.github.io/reactable.extras/reference/text_extra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Text input for reactable column cell — text_extra","text":"","code":"text_extra(id, key = NULL, ...)"},{"path":"https://appsilon.github.io/reactable.extras/reference/text_extra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Text input for reactable column cell — text_extra","text":"id id text input key alternative unique id server side processing ... parameters text input, class supported now","code":""},{"path":"https://appsilon.github.io/reactable.extras/reference/text_extra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Text input for reactable column cell — text_extra","text":"","code":"reactable::colDef(cell = text_extra(\"text\", class = \"table-text\")) #> $cell #> [1] \"function(cellInfo) {\\n              return React.createElement(textExtras,\\n              {id: 'text', value: cellInfo.value, uuid: cellInfo.row['.internal_uuid'] ? cellInfo.row['.internal_uuid'] : (Number(cellInfo.id) + 1),\\n               column: cellInfo.column.id , class: 'table-text', className: 'table-text'}, cellInfo.id)\\n        }\" #> attr(,\"class\") #> [1] \"JS_EVAL\" #>  #> attr(,\"class\") #> [1] \"colDef\""},{"path":"https://appsilon.github.io/reactable.extras/reference/toggle_navigation_buttons.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to disable or re-enable navigation buttons — toggle_navigation_buttons","title":"Utility function to disable or re-enable navigation buttons — toggle_navigation_buttons","text":"Utility function disable re-enable navigation buttons","code":""},{"path":"https://appsilon.github.io/reactable.extras/reference/toggle_navigation_buttons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to disable or re-enable navigation buttons — toggle_navigation_buttons","text":"","code":"toggle_navigation_buttons(disable, session = shiny::getDefaultReactiveDomain())"},{"path":"https://appsilon.github.io/reactable.extras/reference/toggle_navigation_buttons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to disable or re-enable navigation buttons — toggle_navigation_buttons","text":"disable named logical vector session Shiny session object; default current Shiny session","code":""},{"path":"https://appsilon.github.io/reactable.extras/reference/toggle_navigation_buttons.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Utility function to disable or re-enable navigation buttons — toggle_navigation_buttons","text":"disable logical vector exact names: first_page, previous_page, next_page, last_page. logical vectors indicate corresponding button enabled disabled.","code":""},{"path":"https://appsilon.github.io/reactable.extras/reference/tooltip_extra.html","id":null,"dir":"Reference","previous_headings":"","what":"Tool-tip for table headers — tooltip_extra","title":"Tool-tip for table headers — tooltip_extra","text":"Tool-tip table headers","code":""},{"path":"https://appsilon.github.io/reactable.extras/reference/tooltip_extra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tool-tip for table headers — tooltip_extra","text":"","code":"tooltip_extra(content, theme = \"light\")"},{"path":"https://appsilon.github.io/reactable.extras/reference/tooltip_extra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tool-tip for table headers — tooltip_extra","text":"content content displayed tool-tip theme theme tool-tip, either \"light\", \"light-border\", \"material\" \"translucent\"","code":""},{"path":"https://appsilon.github.io/reactable.extras/reference/tooltip_extra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tool-tip for table headers — tooltip_extra","text":"","code":"reactable::colDef(header = tooltip_extra(\"This is my tool-tip\", theme = \"material\")) #> $header #> [1] \"function(columnInfo) {\\n                 return React.createElement(TooltipExtras,\\n                 {column: columnInfo.name, tooltip: 'This is my tool-tip',\\n                 theme: 'material'})\\n        }\" #> attr(,\"class\") #> [1] \"JS_EVAL\" #>  #> attr(,\"class\") #> [1] \"colDef\""},{"path":[]},{"path":[]},{"path":"https://appsilon.github.io/reactable.extras/news/index.html","id":"server-side-processing-0-1-0-9000","dir":"Changelog","previous_headings":"","what":"Server-Side Processing","title":"reactable.extras 0.1.0.9000","text":"reactable_extras_ui() reactable_extras_server() now allows server-side processing data.","code":""},{"path":"https://appsilon.github.io/reactable.extras/news/index.html","id":"miscellaneous-0-1-0-9000","dir":"Changelog","previous_headings":"","what":"Miscellaneous","title":"reactable.extras 0.1.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
