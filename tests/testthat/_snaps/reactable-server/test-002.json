{
  "input": {
    "test-page_controls-first_page": 0,
    "test-page_controls-last_page": 0,
    "test-page_controls-next_page": 1,
    "test-page_controls-previous_page": 0
  },
  "output": {
    "test-page_controls-page_text": "2 of 4",
    "test-reactable": {
      "message": "unused argument (total_pages = 4)",
      "call": [
        "(function (data, columns = NULL, columnGroups = NULL, rownames = NULL, ",
        "    groupBy = NULL, sortable = TRUE, resizable = FALSE, filterable = FALSE, ",
        "    searchable = FALSE, searchMethod = NULL, defaultColDef = NULL, ",
        "    defaultColGroup = NULL, defaultSortOrder = \"asc\", defaultSorted = NULL, ",
        "    pagination = TRUE, defaultPageSize = 10, showPageSizeOptions = FALSE, ",
        "    pageSizeOptions = c(10, 25, 50, 100), paginationType = \"numbers\", ",
        "    showPagination = NULL, showPageInfo = TRUE, minRows = 1, ",
        "    paginateSubRows = FALSE, details = NULL, defaultExpanded = FALSE, ",
        "    selection = NULL, defaultSelected = NULL, onClick = NULL, ",
        "    highlight = FALSE, outlined = FALSE, bordered = FALSE, borderless = FALSE, ",
        "    striped = FALSE, compact = FALSE, wrap = TRUE, showSortIcon = TRUE, ",
        "    showSortable = FALSE, class = NULL, style = NULL, rowClass = NULL, ",
        "    rowStyle = NULL, fullWidth = TRUE, width = NULL, height = NULL, ",
        "    theme = getOption(\"reactable.theme\"), language = getOption(\"reactable.language\"), ",
        "    meta = NULL, elementId = NULL, static = getOption(\"reactable.static\", ",
        "        FALSE), server = FALSE, selectionId = NULL) ",
        "{",
        "    crosstalkKey <- NULL",
        "    crosstalkGroup <- NULL",
        "    dependencies <- list()",
        "    if (requireNamespace(\"crosstalk\", quietly = TRUE)) {",
        "        if (crosstalk::is.SharedData(data)) {",
        "            crosstalkKey <- as.list(data$key())",
        "            crosstalkGroup <- data$groupName()",
        "            data <- data$origData()",
        "            dependencies <- crosstalk::crosstalkLibs()",
        "        }",
        "    }",
        "    if (!(is.data.frame(data) || is.matrix(data))) {",
        "        stop(\"`data` must be a data frame or matrix\")",
        "    }",
        "    else if (is.matrix(data)) {",
        "        data <- as.data.frame(data, stringsAsFactors = FALSE)",
        "    }",
        "    if (ncol(data) == 0) {",
        "        stop(\"`data` must have at least one column\")",
        "    }",
        "    if (is.null(rownames)) {",
        "        rownames <- is.character(attr(data, \"row.names\"))",
        "    }",
        "    if (!is.logical(rownames)) {",
        "        stop(\"`rownames` must be TRUE or FALSE\")",
        "    }",
        "    else if (rownames) {",
        "        rownamesKey <- \".rownames\"",
        "        data <- cbind.data.frame(stats::setNames(data.frame(attr(data, ",
        "            \"row.names\"), stringsAsFactors = FALSE), rownamesKey), ",
        "            data)",
        "        rownamesColumn <- colDef(name = \"\", sortable = FALSE, ",
        "            filterable = FALSE)",
        "        if (rownamesKey %in% names(columns)) {",
        "            rownamesColumn <- mergeLists(rownamesColumn, columns[[rownamesKey]])",
        "        }",
        "        rownamesColumn$rowHeader <- TRUE",
        "        columns[[rownamesKey]] <- rownamesColumn",
        "    }",
        "    if (!is.null(groupBy)) {",
        "        if (!all(groupBy %in% colnames(data))) {",
        "            stop(\"`groupBy` columns must exist in `data`\")",
        "        }",
        "        if (any(sapply(columns[groupBy], function(col) !is.null(col[[\"details\"]])))) {",
        "            stop(\"`details` cannot be used on a grouping column\")",
        "        }",
        "        groupBy <- as.list(groupBy)",
        "    }",
        "    if (!is.logical(sortable)) {",
        "        stop(\"`sortable` must be TRUE or FALSE\")",
        "    }",
        "    if (!is.logical(resizable)) {",
        "        stop(\"`resizable` must be TRUE or FALSE\")",
        "    }",
        "    if (!is.logical(filterable)) {",
        "        stop(\"`filterable` must be TRUE or FALSE\")",
        "    }",
        "    if (!is.logical(searchable)) {",
        "        stop(\"`searchable` must be TRUE or FALSE\")",
        "    }",
        "    if (!is.null(searchMethod) && !is.JS(searchMethod)) {",
        "        stop(\"`searchMethod` must be a JS function\")",
        "    }",
        "    columnKeys <- colnames(data)",
        "    subRowsKey <- \".subRows\"",
        "    columnKeys <- columnKeys[columnKeys != subRowsKey]",
        "    if (!is.null(details)) {",
        "        detailsKey <- \".details\"",
        "        columnKeys <- c(detailsKey, columnKeys)",
        "        detailsColumn <- colDef(name = \"\", sortable = FALSE, ",
        "            filterable = FALSE, searchable = FALSE, resizable = FALSE, ",
        "            width = 45, align = \"center\")",
        "        if (is.colDef(details)) {",
        "            detailsColumn <- mergeLists(detailsColumn, details)",
        "        }",
        "        else {",
        "            detailsColumn <- mergeLists(detailsColumn, colDef(details = details))",
        "        }",
        "        columns <- c(stats::setNames(list(detailsColumn), detailsKey), ",
        "            columns)",
        "    }",
        "    if (!is.null(selection)) {",
        "        selectionKey <- \".selection\"",
        "        columnKeys <- c(selectionKey, columnKeys)",
        "        selectionColumn <- colDef(name = \"\", resizable = FALSE, ",
        "            width = 45)",
        "        selectionColumn$selectable <- TRUE",
        "        if (selectionKey %in% names(columns)) {",
        "            selectionColumn <- mergeLists(selectionColumn, columns[[selectionKey]])",
        "        }",
        "        columns[[selectionKey]] <- selectionColumn",
        "    }",
        "    if (!is.null(defaultColDef)) {",
        "        if (!is.colDef(defaultColDef)) {",
        "            stop(\"`defaultColDef` must be a column definition\")",
        "        }",
        "        columns <- lapply(columnKeys, function(name) {",
        "            mergeLists(defaultColDef, columns[[name]])",
        "        })",
        "        columns <- stats::setNames(columns, columnKeys)",
        "    }",
        "    if (!is.null(defaultColGroup)) {",
        "        if (!is.colGroup(defaultColGroup)) {",
        "            stop(\"`defaultColGroup` must be a column group definition\")",
        "        }",
        "        columnGroups <- lapply(columnGroups, function(group) {",
        "            mergeLists(defaultColGroup, group)",
        "        })",
        "    }",
        "    if (!is.null(columns)) {",
        "        if (!isNamedList(columns) || !all(sapply(columns, is.colDef))) {",
        "            stop(\"`columns` must be a named list of column definitions\")",
        "        }",
        "        if (!all(names(columns) %in% columnKeys)) {",
        "            stop(\"`columns` names must exist in `data`\")",
        "        }",
        "    }",
        "    if (!is.null(columnGroups)) {",
        "        if (!all(sapply(columnGroups, is.colGroup))) {",
        "            stop(\"`columnGroups` must be a list of column group definitions\")",
        "        }",
        "        for (group in columnGroups) {",
        "            if (length(group$columns) == 0) {",
        "                stop(\"`columnGroups` groups must contain at least one column\")",
        "            }",
        "            if (!all(group$columns %in% columnKeys)) {",
        "                stop(\"`columnGroups` columns must exist in `data`\")",
        "            }",
        "        }",
        "    }",
        "    if (!isSortOrder(defaultSortOrder)) {",
        "        stop(\"`defaultSortOrder` must be \\\"asc\\\" or \\\"desc\\\"\")",
        "    }",
        "    if (!is.null(defaultSorted)) {",
        "        if (!is.character(defaultSorted) && !isNamedList(defaultSorted)) {",
        "            stop(\"`defaultSorted` must be a named list or character vector of column names\")",
        "        }",
        "        if (is.character(defaultSorted)) {",
        "            orders <- lapply(defaultSorted, function(name) {",
        "                if (!is.null(columns[[name]]$defaultSortDesc)) {",
        "                  if (columns[[name]]$defaultSortDesc) ",
        "                    \"desc\"",
        "                  else \"asc\"",
        "                }",
        "                else {",
        "                  defaultSortOrder",
        "                }",
        "            })",
        "            defaultSorted <- stats::setNames(orders, defaultSorted)",
        "        }",
        "        if (!all(sapply(defaultSorted, isSortOrder))) {",
        "            stop(\"`defaultSorted` values must be \\\"asc\\\" or \\\"desc\\\"\")",
        "        }",
        "        if (!all(names(defaultSorted) %in% colnames(data))) {",
        "            stop(\"`defaultSorted` columns must exist in `data`\")",
        "        }",
        "        defaultSorted <- columnSortDefs(defaultSorted)",
        "    }",
        "    if (!is.logical(pagination)) {",
        "        stop(\"`pagination` must be TRUE or FALSE\")",
        "    }",
        "    if (!is.numeric(defaultPageSize)) {",
        "        stop(\"`defaultPageSize` must be numeric\")",
        "    }",
        "    if (!is.logical(showPageSizeOptions)) {",
        "        stop(\"`showPageSizeOptions` must be TRUE or FALSE\")",
        "    }",
        "    if (!is.null(pageSizeOptions)) {",
        "        if (!is.numeric(pageSizeOptions)) {",
        "            stop(\"`pageSizeOptions` must be numeric\")",
        "        }",
        "        pageSizeOptions <- as.list(pageSizeOptions)",
        "    }",
        "    if (!paginationType %in% c(\"numbers\", \"jump\", \"simple\")) {",
        "        stop(\"`paginationType` must be one of \\\"numbers\\\", \\\"jump\\\", \\\"simple\\\"\")",
        "    }",
        "    if (!is.null(showPagination) && !is.logical(showPagination)) {",
        "        stop(\"`showPagination` must be TRUE or FALSE\")",
        "    }",
        "    if (!is.logical(showPageInfo)) {",
        "        stop(\"`showPageInfo` must be TRUE or FALSE\")",
        "    }",
        "    if (!is.numeric(minRows)) {",
        "        stop(\"`minRows` must be numeric\")",
        "    }",
        "    if (!is.logical(paginateSubRows)) {",
        "        stop(\"`paginateSubRows` must be TRUE or FALSE\")",
        "    }",
        "    if (!is.logical(defaultExpanded)) {",
        "        stop(\"`defaultExpanded` must be TRUE or FALSE\")",
        "    }",
        "    if (!is.null(selection) && !selection %in% c(\"multiple\", ",
        "        \"single\")) {",
        "        stop(\"`selection` must be \\\"multiple\\\" or \\\"single\\\"\")",
        "    }",
        "    if (!is.null(selectionId)) {",
        "        warning(\"`selectionId` is deprecated. Use `getReactableState()` to get the selected rows in Shiny.\")",
        "        if (!is.character(selectionId)) {",
        "            stop(\"`selectionId` must be a character\")",
        "        }",
        "    }",
        "    if (!is.null(defaultSelected)) {",
        "        if (!is.numeric(defaultSelected)) {",
        "            stop(\"`defaultSelected` must be numeric\")",
        "        }",
        "        if (any(defaultSelected < 1 | defaultSelected > nrow(data))) {",
        "            stop(\"`defaultSelected` row indices must be within range\")",
        "        }",
        "        defaultSelected <- as.list(defaultSelected - 1)",
        "    }",
        "    if (!is.null(onClick) && !onClick %in% c(\"expand\", \"select\") && ",
        "        !is.JS(onClick)) {",
        "        stop(\"`onClick` must be \\\"expand\\\", \\\"select\\\", or a JS function\")",
        "    }",
        "    if (!is.logical(highlight)) {",
        "        stop(\"`highlight` must be TRUE or FALSE\")",
        "    }",
        "    if (!is.logical(outlined)) {",
        "        stop(\"`outlined` must be TRUE or FALSE\")",
        "    }",
        "    if (!is.logical(bordered)) {",
        "        stop(\"`bordered` must be TRUE or FALSE\")",
        "    }",
        "    if (!is.logical(borderless)) {",
        "        stop(\"`borderless` must be TRUE or FALSE\")",
        "    }",
        "    if (!is.logical(striped)) {",
        "        stop(\"`striped` must be TRUE or FALSE\")",
        "    }",
        "    if (!is.logical(compact)) {",
        "        stop(\"`compact` must be TRUE or FALSE\")",
        "    }",
        "    if (!is.logical(wrap)) {",
        "        stop(\"`wrap` must be `TRUE` or `FALSE`\")",
        "    }",
        "    if (!is.logical(showSortIcon)) {",
        "        stop(\"`showSortIcon` must be TRUE or FALSE\")",
        "    }",
        "    if (!is.logical(showSortable)) {",
        "        stop(\"`showSortable` must be TRUE or FALSE\")",
        "    }",
        "    if (!is.null(class) && !is.character(class)) {",
        "        stop(\"`class` must be a character\")",
        "    }",
        "    if (!is.null(style) && !isNamedList(style) && !is.character(style)) {",
        "        stop(\"`style` must be a named list or character string\")",
        "    }",
        "    if (!is.null(rowClass)) {",
        "        if (!is.character(rowClass) && !is.JS(rowClass) && !is.function(rowClass)) {",
        "            stop(\"`rowClass` must be a character, JS function, or R function\")",
        "        }",
        "        if (is.function(rowClass)) {",
        "            rowClass <- lapply(seq_len(nrow(data)), function(index) {",
        "                callFunc(rowClass, index)",
        "            })",
        "        }",
        "    }",
        "    if (!is.null(rowStyle)) {",
        "        if (!isNamedList(rowStyle) && !is.character(rowStyle) && ",
        "            !is.JS(rowStyle) && !is.function(rowStyle)) {",
        "            stop(\"`rowStyle` must be a named list, character string, JS function, or R function\")",
        "        }",
        "        if (is.function(rowStyle)) {",
        "            rowStyle <- lapply(seq_len(nrow(data)), function(index) {",
        "                asReactStyle(callFunc(rowStyle, index))",
        "            })",
        "        }",
        "        else if (is.character(rowStyle) && !is.JS(rowStyle)) {",
        "            rowStyle <- asReactStyle(rowStyle)",
        "        }",
        "    }",
        "    if (!is.logical(fullWidth)) {",
        "        stop(\"`fullWidth` must be TRUE or FALSE\")",
        "    }",
        "    width <- htmltools::validateCssUnit(width)",
        "    height <- htmltools::validateCssUnit(height)",
        "    if (!is.null(theme)) {",
        "        if (is.function(theme)) {",
        "            theme <- callFunc(theme)",
        "        }",
        "        if (!is.null(theme) && !is.reactableTheme(theme)) {",
        "            stop(\"`theme` must be a reactable theme object\")",
        "        }",
        "    }",
        "    if (!is.null(language) && !is.reactableLang(language)) {",
        "        stop(\"`language` must be a reactable language options object\")",
        "    }",
        "    if (!is.null(meta) && !isNamedList(meta)) {",
        "        stop(\"`meta` must be a named list\")",
        "    }",
        "    if (!is.logical(static)) {",
        "        stop(\"`static` must be TRUE or FALSE\")",
        "    }",
        "    addDependencies <- function(x) {",
        "        for (dep in htmltools::findDependencies(x)) {",
        "            dependencies[[sprintf(\"%s-%s\", dep$name, dep$version)]] <<- dep",
        "        }",
        "        dependencies <<- htmltools::resolveDependencies(dependencies)",
        "    }",
        "    cols <- lapply(columnKeys, function(key) {",
        "        column <- list(id = key, name = key, type = colType(data[[key]]))",
        "        if (!is.null(columns[[key]])) {",
        "            column <- mergeLists(column, columns[[key]])",
        "        }",
        "        cell <- column[[\"cell\"]]",
        "        if (is.function(cell)) {",
        "            content <- lapply(seq_len(nrow(data)), function(index) {",
        "                value <- data[[key]][[index]]",
        "                callFunc(cell, value, index, key)",
        "            })",
        "            column$cell <- lapply(content, asReactTag)",
        "            addDependencies(column$cell)",
        "        }",
        "        header <- column[[\"header\"]]",
        "        if (!is.null(header)) {",
        "            if (is.function(header)) {",
        "                header <- callFunc(header, column$name, key)",
        "            }",
        "            if (!is.JS(header)) {",
        "                column$header <- asReactTag(header)",
        "                addDependencies(column$header)",
        "            }",
        "        }",
        "        footer <- column[[\"footer\"]]",
        "        if (!is.null(footer)) {",
        "            if (is.function(footer)) {",
        "                values <- data[[key]]",
        "                footer <- callFunc(footer, values, key)",
        "            }",
        "            if (!is.JS(footer)) {",
        "                column$footer <- asReactTag(footer)",
        "                addDependencies(column$footer)",
        "            }",
        "        }",
        "        details <- column[[\"details\"]]",
        "        if (is.function(details)) {",
        "            details <- lapply(seq_len(nrow(data)), function(index) {",
        "                callFunc(details, index, key)",
        "            })",
        "            column$details <- lapply(details, asReactTag)",
        "            addDependencies(column$details)",
        "        }",
        "        filterInput <- column[[\"filterInput\"]]",
        "        if (!is.null(filterInput)) {",
        "            if (is.function(filterInput)) {",
        "                values <- data[[key]]",
        "                filterInput <- callFunc(filterInput, values, ",
        "                  key)",
        "            }",
        "            if (!is.JS(filterInput)) {",
        "                column$filterInput <- asReactTag(filterInput)",
        "                addDependencies(column$filterInput)",
        "            }",
        "        }",
        "        className <- column[[\"className\"]]",
        "        if (is.function(className)) {",
        "            classes <- lapply(seq_len(nrow(data)), function(index) {",
        "                value <- data[[key]][[index]]",
        "                callFunc(className, value, index, key)",
        "            })",
        "            column$className <- classes",
        "        }",
        "        style <- column[[\"style\"]]",
        "        if (is.function(style)) {",
        "            style <- lapply(seq_len(nrow(data)), function(index) {",
        "                value <- data[[key]][[index]]",
        "                callFunc(style, value, index, key)",
        "            })",
        "            column$style <- lapply(style, asReactStyle)",
        "        }",
        "        column",
        "    })",
        "    if (!is.null(columnGroups)) {",
        "        columnGroups <- lapply(columnGroups, function(group) {",
        "            header <- group[[\"header\"]]",
        "            if (!is.null(header)) {",
        "                if (is.function(header)) {",
        "                  header <- callFunc(header, group$name)",
        "                }",
        "                if (!is.JS(header)) {",
        "                  group$header <- asReactTag(header)",
        "                  addDependencies(group$header)",
        "                }",
        "            }",
        "            group",
        "        })",
        "    }",
        "    preRenderHook <- NULL",
        "    serverRowCount <- NULL",
        "    serverMaxRowCount <- NULL",
        "    if (!isFALSE(server)) {",
        "        backend <- if (isTRUE(server)) ",
        "            getOption(\"reactable.server.backend\")",
        "        else server",
        "        backend <- getServerBackend(backend = backend)",
        "        initialProps <- list(data = data, columns = cols, pagination = pagination, ",
        "            paginateSubRows = paginateSubRows, pageIndex = 0, ",
        "            pageSize = defaultPageSize, sortBy = defaultSorted, ",
        "            groupBy = groupBy, searchMethod = searchMethod)",
        "        do.call(reactableServerInit, c(list(backend), initialProps))",
        "        initialPage <- do.call(reactableServerData, c(list(backend), ",
        "            initialProps))",
        "        if (!is.resolvedData(initialPage)) {",
        "            stop(\"reactable server backends must return a `resolvedData()` object from `reactableServerData()`\")",
        "        }",
        "        data <- initialPage$data",
        "        serverRowCount <- initialPage$rowCount",
        "        serverMaxRowCount <- initialPage$maxRowCount",
        "        preRenderHook <- function(instance) {",
        "            session <- if (requireNamespace(\"shiny\", quietly = TRUE)) {",
        "                shiny::getDefaultReactiveDomain()",
        "            }",
        "            if (is.null(session)) {",
        "                instance$x$tag$attribs$data <- toJSON(initialProps$data)",
        "                return(instance)",
        "            }",
        "            outputId <- shiny::getCurrentOutputInfo(session = session)[[\"name\"]]",
        "            dataURL <- session$registerDataObj(outputId, c(list(backend = backend), ",
        "                initialProps), reactableFilterFunc)",
        "            instance$x$tag$attribs$dataURL <- dataURL",
        "            instance",
        "        }",
        "    }",
        "    data <- toJSON(data)",
        "    dataKey <- digest::digest(list(data, cols))",
        "    defaultArgs <- formals()",
        "    args <- as.list(match.call())",
        "    setArgs <- stats::setNames(names(defaultArgs) %in% names(args), ",
        "        names(defaultArgs))",
        "    component <- reactR::component(\"Reactable\", list(data = data, ",
        "        columns = cols, columnGroups = columnGroups, groupBy = groupBy, ",
        "        sortable = if (!sortable) FALSE, resizable = if (resizable) TRUE, ",
        "        filterable = if (filterable) TRUE, searchable = if (searchable) TRUE, ",
        "        searchMethod = searchMethod, defaultSortDesc = if (isDescOrder(defaultSortOrder)) TRUE, ",
        "        defaultSorted = defaultSorted, pagination = if (!pagination) FALSE, ",
        "        defaultPageSize = if (setArgs[\"defaultPageSize\"]) defaultPageSize, ",
        "        showPageSizeOptions = if (setArgs[\"showPageSizeOptions\"]) showPageSizeOptions, ",
        "        pageSizeOptions = if (setArgs[\"pageSizeOptions\"]) pageSizeOptions, ",
        "        paginationType = if (setArgs[\"paginationType\"]) paginationType, ",
        "        showPagination = if (!is.null(showPagination)) showPagination, ",
        "        showPageInfo = if (setArgs[\"showPageInfo\"]) showPageInfo, ",
        "        minRows = if (setArgs[\"minRows\"]) minRows, paginateSubRows = if (paginateSubRows) TRUE, ",
        "        defaultExpanded = if (defaultExpanded) defaultExpanded, ",
        "        selection = selection, selectionId = selectionId, defaultSelected = defaultSelected, ",
        "        onClick = onClick, highlight = if (highlight) TRUE, outlined = if (outlined) TRUE, ",
        "        bordered = if (bordered) TRUE, borderless = if (borderless) TRUE, ",
        "        striped = if (striped) TRUE, compact = if (compact) TRUE, ",
        "        nowrap = if (!wrap) TRUE, showSortIcon = if (!showSortIcon) FALSE, ",
        "        showSortable = if (showSortable) TRUE, className = class, ",
        "        style = asReactStyle(style), rowClassName = rowClass, ",
        "        rowStyle = rowStyle, inline = if (!fullWidth) TRUE, width = width, ",
        "        height = height, theme = theme, language = language, ",
        "        meta = meta, crosstalkKey = crosstalkKey, crosstalkGroup = crosstalkGroup, ",
        "        elementId = elementId, dataKey = dataKey, static = static, ",
        "        serverRowCount = serverRowCount, serverMaxRowCount = serverMaxRowCount))",
        "    htmlwidgets::createWidget(name = \"reactable\", reactR::reactMarkup(component), ",
        "        width = width, height = height, sizingPolicy = htmlwidgets::sizingPolicy(defaultWidth = \"auto\", ",
        "            defaultHeight = \"auto\", knitr.figure = FALSE), package = \"reactable\", ",
        "        dependencies = dependencies, elementId = elementId, preRenderHook = preRenderHook)",
        "})(columns = list(mpg = list(name = \"Miles per Gallon\"), cyl = list(",
        "    name = \"Cylinders\"), disp = list(name = \"Displacement\"), ",
        "    hp = list(name = \"Horsepower\"), wt = list(name = \"Weight\"), ",
        "    gear = list(name = \"Number of forward gears\"), vs = list(",
        "        name = \"Engine\"), am = list(name = \"Transmission\")), ",
        "    striped = TRUE, compact = TRUE, total_pages = 4, pagination = FALSE, ",
        "    showPagination = FALSE, sortable = TRUE, data = list(mpg = c(21, ",
        "    21, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.2), cyl = c(6, ",
        "    6, 4, 6, 8, 6, 8, 4, 4, 6), disp = c(160, 160, 108, 258, ",
        "    360, 225, 360, 146.7, 140.8, 167.6), hp = c(110, 110, 93, ",
        "    110, 175, 105, 245, 62, 95, 123), drat = c(3.9, 3.9, 3.85, ",
        "    3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.92), wt = c(2.62, 2.875, ",
        "    2.32, 3.215, 3.44, 3.46, 3.57, 3.19, 3.15, 3.44), qsec = c(16.46, ",
        "    17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20, 22.9, 18.3), ",
        "        vs = c(0, 0, 1, 1, 0, 1, 0, 1, 1, 1), am = c(1, 1, 1, ",
        "        0, 0, 0, 0, 0, 0, 0), gear = c(4, 4, 4, 3, 3, 3, 3, 4, ",
        "        4, 4), carb = c(4, 4, 1, 1, 2, 1, 4, 2, 2, 4), make = c(\"Mazda RX4\", ",
        "        \"Mazda RX4 Wag\", \"Datsun 710\", \"Hornet 4 Drive\", \"Hornet Sportabout\", ",
        "        \"Valiant\", \"Duster 360\", \"Merc 240D\", \"Merc 230\", \"Merc 280\"",
        "        )))"
      ],
      "type": null
    }
  },
  "export": {

  }
}
